---
title: "Cleaning HR Data for Analysis"
author: "Guillermo Gallardo"
date: "Summer 2024"
output: html_document



# Setup

Load needed packages. make sure they are installed.

```{r}
library(readxl) #for loading Excel files
library(dplyr) #for data processing/cleaning
library(tidyr) #for data processing/cleaning
library(skimr) #for nice visualization of data 
library(here) #to set paths
```


# Data loading

Note that for functions that come from specific packages (instead of base R), I often specify both package and function like so:
package::function() that's not required one could just call the function specifying the package makes it clearer where the function "lives",
but it adds typing. You can do it either way.

```{r}
# path to data
# note the use of the here() package and not absolute paths
hr_data = here::here("data","raw-data","IBM HR Analytics Data.xlsx")
rawdata = readxl::read_excel(hr_data)
```


# Check data

First we can look at the codebook

```{r}
codebook = readxl::read_excel(hr_data, sheet ="Codebook")
print(codebook)
```


Several ways of looking at the data

```{r}
dplyr::glimpse(rawdata)
summary(rawdata)
head(rawdata)
skimr::skim(rawdata)
```


**NEED TO UPDATE THE EDUCATION FIELD**

# Cleaning HR Data

Removing three columns from dataset. This columns provide incorrect salary information. After reviewing the data, I decided to keep only the *MonthlyIncome* field to have consistency in the analysis.

```{r removing columns with incorrect data}
d1 = rawdata %>% 
  select(-DailyRate, -HourlyRate, -MonthlyRate)

head(d1)
```



The *Education* field was a numeric field that only showed 1-5 so I added labels to this so we can better understand our employees.
```{r adding label to Education}

d2 = d1 %>% 
    mutate(Education = case_when(
    Education == 1 ~ "Below College",
    Education == 2 ~ "College",
    Education == 3 ~ "Bachelor's",
    Education == 4 ~ "Master's",
    Education == 5 ~ "Doctorate",
    TRUE ~ as.character(Education)
  ))

head(d2)

```
```{r}
tenure_breaks <- seq(0, 40, by = 5)
tenure_labels <- paste0(tenure_breaks[-length(tenure_breaks)], "-", tenure_breaks[-1], " years")

d3 = d2 %>%
  mutate(TenureCategory = cut(YearsAtCompany, breaks = tenure_breaks, labels = tenure_labels, include.lowest = TRUE))


head(d3)
```



```{r}
HRprocesseddata = d3
```


# Save data 

Finally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. 
This preserves coding like factors, characters, numeric, etc.  If you save as CSV, that information would get lost.
However, CSV is better for sharing with others since it's plain text. If you do CSV, you might want to write down somewhere what each variable is.

See here for some suggestions on how to store your processed data:
http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata

```{r}
save_data_location = here::here("data","processed-data","HRprocesseddata.rds")
saveRDS(HRprocesseddata, file = save_data_location)
```






